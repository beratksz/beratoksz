@model beratoksz.Models.AppUser
@{
    ViewData["Title"] = "Güvenlik Ayarları";
    Layout = "_Layout";
}
@if (Model == null)
{
    <div class="alert alert-danger">Kullanıcı bilgisi alınamadı. Lütfen tekrar giriş yapın.</div>
    return;
} 
<style>
    /* intl-tel-input alanı için temel düzenlemeler */
    .iti {
        width: 100% !important;
        display: block;
    }

        /* Input alanını bootstrap uyumlu hale getirmek için */
        .iti input {
            width: 100%;
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            box-shadow: none;
        }

    /* Dropdown liste stilini düzenleyebilirsiniz */
    .iti__flag-container {
        margin-right: 0.5rem;
    }

    .iti__selected-flag {
        cursor: pointer;
    }

    /* Eğer input alanı fazla yüksek geliyorsa, yüksekliği azaltabilirsiniz */
    .iti--allow-dropdown input {
        height: calc(2.5rem);
    }

</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"></script>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="bx bx-shield-quarter"></i> Güvenlik Ayarları</h3>
                </div>
                <div class="card-body">
                    <div id="resultMessage"></div>

                    <!-- Kullanıcı Adı -->
                    <div class="mb-3">
                        <label for="username" class="form-label">Kullanıcı Adı</label>
                        <input type="text" id="username" class="form-control" value="@Model.UserName" required />
                    </div>

                    <!-- Şifre Güncelleme -->
                    <div class="mb-3">
                        <label for="currentPassword" class="form-label">Mevcut Şifre</label>
                        <input type="password" id="currentPassword" class="form-control" />

                        <label for="newPassword" class="form-label mt-3">Yeni Şifre</label>
                        <input type="password" id="newPassword" class="form-control" />

                        <label for="confirmPassword" class="form-label mt-3">Yeni Şifre (Tekrar)</label>
                        <input type="password" id="confirmPassword" class="form-control" />
                    </div>

                    <!-- 2FA -->
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="twoFactorSwitch" @(Model.TwoFactorEnabled ? "checked" : "") />
                        <label class="form-check-label" for="twoFactorSwitch">
                            <i class="bx bx-shield-plus"></i> İki Faktörlü Kimlik Doğrulama
                        </label>
                    </div>

                    <!-- Telefon Güncelleme ve Doğrulama -->
                    <form id="phone-verify-form" class="mb-4">
                        <label class="form-label">Telefon Numaranız</label>
                        <input type="text" class="form-control" id="phoneNumber" value="@Model.PhoneNumber" placeholder="+90 5xx xxx xx xx" required />

                        <button type="button" class="btn btn-outline-primary w-100 mt-2" id="sendCodeBtn" onclick="sendVerificationCode()">📲 Kod Gönder</button>

                        <div class="mt-3" id="codeInputArea" style="display:none;">
                            <label class="form-label">Gelen Kodu Girin</label>
                            <input type="text" class="form-control" id="verificationCode" required />
                            <button type="button" class="btn btn-success mt-2 w-100" onclick="verifyPhoneCode()">✅ Doğrula</button>
                            <div class="text-muted text-center mt-2" id="countdownText">Kalan süre: <span id="timer">05:00</span></div>
                        </div>
                    </form>

                    <div id="phoneMessage" class="mt-2"></div>

                    <button type="button" class="btn btn-primary w-100 mt-3" onclick="updateSecuritySettings()" id="updateBtn">
                        💾 Ayarları Güncelle
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
   
    <script>
        let phoneVerified = false;
        let timerInterval;
        let remainingSeconds = 300;

        const phoneInput = document.querySelector("#phoneNumber");
        const iti = window.intlTelInput(phoneInput, {
            initialCountry: "tr",
            nationalMode: false,     // uluslararası formatta göster
            autoHideDialCode: false  // dial code her zaman görünür
        });

        // Form gönderimi sırasında tam numarayı almak için:
        function getFullPhoneNumber() {
            return iti.getNumber(); // Örneğin, +905xxxxxxxxx formatında
        }

        function updateSecuritySettings() {
            if (!phoneVerified) {
                document.getElementById("resultMessage").innerHTML = `
                    <div class="alert alert-warning mt-3">📵 Telefon numaranızı doğrulamadan ayarları güncelleyemezsiniz.</div>
                `;
                return;
            }

            const payload = {
                userName: document.getElementById("username").value,
                currentPassword: document.getElementById("currentPassword").value,
                newPassword: document.getElementById("newPassword").value,
                confirmPassword: document.getElementById("confirmPassword").value,
                enableTwoFactor: document.getElementById("twoFactorSwitch").checked,
                phoneNumber: getFullPhoneNumber()  // getFullPhoneNumber fonksiyonu kullanılıyor
            };

            fetch("/api/account/update-security-settings", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            })
            .then(res => res.json().then(data => ({ ok: res.ok, body: data })))
            .then(result => {
                const msgBox = document.getElementById("resultMessage");
                msgBox.innerHTML = `
                    <div class="alert ${result.ok ? "alert-success" : "alert-danger"} mt-3">
                        ${result.body.message || "İşlem sonucu alınamadı."}
                    </div>
                `;
            });
        }

            function sendVerificationCode() {
            const phone = getFullPhoneNumber();
            if (!iti.isValidNumber()) {
                document.getElementById("phoneMessage").innerHTML = `<div class="alert alert-danger">Geçersiz telefon numarası. Lütfen doğru bir numara girin.</div>`;
                return;
            }
            fetch("/api/account/send-phone-verification", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ phoneNumber: phone })
            })
            .then(res => res.json())
            .then(data => {
                document.getElementById("phoneMessage").innerHTML = `<div class="alert alert-info">${data.message}</div>`;
                document.getElementById("codeInputArea").style.display = "block";
                phoneVerified = false;
                startTimer();
            });
        }


        function verifyPhoneCode() {
            const code = document.getElementById("verificationCode").value;
            fetch("/api/account/verify-phone-code", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ code: code })
            })
            .then(res => res.json())
            .then(data => {
                document.getElementById("phoneMessage").innerHTML = `<div class="alert alert-${data.message.includes('başarıyla') ? 'success' : 'danger'}">${data.message}</div>`;
                if (data.message.includes("başarıyla")) {
                    clearInterval(timerInterval);
                    document.getElementById("codeInputArea").style.display = "none";
                    phoneVerified = true;
                }
            });
        }

        function startTimer() {
            clearInterval(timerInterval);
            remainingSeconds = 300;
            updateTimerUI();

            timerInterval = setInterval(() => {
                remainingSeconds--;
                updateTimerUI();

                if (remainingSeconds <= 0) {
                    clearInterval(timerInterval);
                    document.getElementById("timer").innerText = "00:00";
                    document.getElementById("phoneMessage").innerHTML = `<div class="alert alert-warning">Kodun süresi doldu. Lütfen tekrar gönderin.</div>`;
                    document.getElementById("codeInputArea").style.display = "none";
                }
            }, 1000);
        }

        function updateTimerUI() {
            const minutes = String(Math.floor(remainingSeconds / 60)).padStart(2, '0');
            const seconds = String(remainingSeconds % 60).padStart(2, '0');
            document.getElementById("timer").innerText = `${minutes}:${seconds}`;
        }
    </script>
}
