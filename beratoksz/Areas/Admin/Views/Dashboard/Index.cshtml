@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <meta charset="utf-8" />
    <title>Sistem İzleme</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />
    <link href="https://fonts.googleapis.com/css?family=Orbitron&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Dashboard.css" />
</head>
<body>
    <div class="header">
        <h1>Genişletilmiş Sistem İzleme</h1>
    </div>
    <div class="container my-4">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

        <script>
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/statusHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            async function startSignalR() {
                try {
                    await connection.start();
                    console.log("✅ SignalR bağlantısı başarılı:", connection.state);
                } catch (err) {
                    console.error("❌ SignalR bağlantı hatası:", err);
                    setTimeout(startSignalR, 5000); // 5 saniye sonra tekrar dene
                }
            }

            connection.on("UpdatePerformanceMetrics", function(data) {
                console.log("📡 SignalR Verisi Geldi:", data);

                // Gelen veriyi doğrula ve eksik alanları kontrol et
                if (!data || !data.systemMetrics || !data.requestMetrics) {
                    console.error("❌ HATA: Eksik veri geldi!", data);
                    return;
                }

                // JSON içindeki değerleri güncelle
                document.getElementById("cpuUsage").innerText = data.systemMetrics.cpuUsage || "Bilinmiyor";
                document.getElementById("memoryUsage").innerText = data.systemMetrics.memoryUsage || "Bilinmiyor";
                document.getElementById("uptime").innerText = data.systemMetrics.uptime || "Bilinmiyor";
                document.getElementById("requestCount").innerText = data.requestMetrics.requestCount || "0";
                document.getElementById("avgResponseTime").innerText = data.requestMetrics.avgResponseTime || "0 ms";
                document.getElementById("minResponseTime").innerText = data.requestMetrics.minResponseTime || "0 ms";
                document.getElementById("maxResponseTime").innerText = data.requestMetrics.maxResponseTime || "0 ms";
            });

            startSignalR();
        </script>

        <!-- Dashboard UI -->
        <div class="dashboard">
            <h2>Performans Durumu</h2>
            <p>🖥 CPU Kullanımı: <span id="cpuUsage">-</span></p>
            <p>💾 Bellek Kullanımı: <span id="memoryUsage">-</span></p>
            <p>⏳ Uptime: <span id="uptime">-</span></p>
            <p>🌐 Toplam HTTP İstekleri: <span id="requestCount">-</span></p>
            <p>⚡ Ortalama Yanıt Süresi: <span id="avgResponseTime">-</span></p>
            <p>🚀 En Hızlı Yanıt Süresi: <span id="minResponseTime">-</span></p>
            <p>🐢 En Yavaş Yanıt Süresi: <span id="maxResponseTime">-</span></p>
        </div>

    </div>



    <!-- Chart.js Kütüphanesi -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Grafik Alanı -->
    <canvas id="cpuChart"></canvas>
    <canvas id="memoryChart"></canvas>

    <script>
        const cpuCtx = document.getElementById('cpuChart').getContext('2d');
        const memoryCtx = document.getElementById('memoryChart').getContext('2d');

        // CPU ve RAM Grafikleri
        const cpuChart = new Chart(cpuCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'CPU Kullanımı (%)',
                    data: [],
                    borderColor: 'red',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true, max: 100 }
                }
            }
        });

        const memoryChart = new Chart(memoryCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'RAM Kullanımı (MB)',
                    data: [],
                    borderColor: 'blue',
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        // SignalR ile Gelen Verileri Grafiğe Ekle
        connection.on("UpdatePerformanceMetrics", function (data) {
            console.log("📡 SignalR Verisi Geldi:", data);

            if (!data || !data.systemMetrics) return;

            const timestamp = new Date().toLocaleTimeString();

            // CPU Grafiği Güncelle
            cpuChart.data.labels.push(timestamp);
            cpuChart.data.datasets[0].data.push(parseFloat(data.systemMetrics.cpuUsage));
            if (cpuChart.data.labels.length > 10) cpuChart.data.labels.shift();
            if (cpuChart.data.datasets[0].data.length > 10) cpuChart.data.datasets[0].data.shift();
            cpuChart.update();

            // RAM Grafiği Güncelle
            memoryChart.data.labels.push(timestamp);
            memoryChart.data.datasets[0].data.push(parseFloat(data.systemMetrics.memoryUsage));
            if (memoryChart.data.labels.length > 10) memoryChart.data.labels.shift();
            if (memoryChart.data.datasets[0].data.length > 10) memoryChart.data.datasets[0].data.shift();
            memoryChart.update();
        });
    </script>

    <table>
        <tr>
            <th>Kullanıcı</th>
            <th>Sayfa</th>
            <th>Zaman</th>
        </tr>
        <tbody id="activityLog"></tbody>
    </table>

    <script>
        function loadActivityLog() {
            fetch("/api/activitylog")
                .then(response => response.json())
                .then(data => {
                    let tableBody = document.getElementById("activityLog");
                    tableBody.innerHTML = "";
                    data.forEach(log => {
                        let row = `<tr><td>${log.userName}</td><td>${log.page}</td><td>${new Date(log.timestamp).toLocaleString()}</td></tr>`;
                        tableBody.innerHTML += row;
                    });
                });
        }

        setInterval(loadActivityLog, 5000);
    </script>
    <h2>🔍 Ziyaretçi Analizi</h2>

    <div>
        <h3>📊 En Çok Ziyaret Edilen Sayfalar</h3>
        <canvas id="topPagesChart"></canvas>
    </div>

    <div>
        <h3>🌍 Tarayıcı Kullanım Oranları</h3>
        <canvas id="browserChart"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function loadTopPages() {
            const response = await fetch('/api/adminanalytics/top-pages');
            const data = await response.json();
            const ctx = document.getElementById('topPagesChart').getContext('2d');

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: data.map(d => d.page),
                    datasets: [{
                        label: 'Ziyaret Sayısı',
                        data: data.map(d => d.count),
                        backgroundColor: 'blue'
                    }]
                }
            });
        }

               async function loadBrowserStats() {
            try {
                const response = await fetch('/api/adminanalytics/browsers');
                if (!response.ok) throw new Error("API yanıtı geçersiz!");

                const data = await response.json();
                if (!data || data.length === 0) {
                    console.warn("📡 API'den boş veri geldi!");
                    return;
                }

                const ctx = document.getElementById('browserChart').getContext('2d');
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: data.map(d => d.browser),
                        datasets: [{
                            label: 'Kullanım Oranı',
                            data: data.map(d => d.count),
                            backgroundColor: ['red', 'blue', 'green', 'yellow', 'purple']
                        }]
                    }
                });
            } catch (error) {
                console.error("📡 API hatası:", error.message);
            }
        }


        loadTopPages();
        loadBrowserStats();
    </script>

</body>
</html>
