<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Sistem İzleme Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/Dashboard.css" />
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark py-3">
        <div class="container">
            <a class="navbar-brand" href="/Admin/Dashboard#systemwatch">💻 Sistem İzleme</a>
            <a class="navbar-brand" href="/Admin/Dashboard#watchusers">👥 Kullanıcı Aktiviteleri</a>
            <a class="navbar-brand" href="/Admin/Dashboard#usersecurity">🔒 Hesap Güvenliği</a>
            <a class="navbar-brand" href="/Admin/Dashboard#topgraphwatch">📈 Genel Grafik İzleme</a>
        </div>
    </nav>

    <div class="container py-4" id="systemwatch">
        <div class="row">
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">CPU Kullanımı</div>
                    <div class="card-body text-center">
                        <span id="cpuUsage" class="fs-4">-</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">Bellek Kullanımı</div>
                    <div class="card-body text-center">
                        <span id="memoryUsage" class="fs-4">-</span>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">Çalışma Süresi (Uptime)</div>
                    <div class="card-body text-center">
                        <span id="uptime" class="fs-4">-</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <canvas id="cpuChart"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="memoryChart"></canvas>
            </div>
        </div>

        <div class="dashboard" id="watchusers">
            <h2>Gerçek Zamanlı Sistem Durumu</h2>
            <p>👥 Anlık Aktif Kullanıcı Sayısı: <span id="activeUsers">0</span></p>
        </div>

        <div class="card mb-3">
            <div class="card-header">Son Kullanıcı Aktiviteleri</div>
            <div class="card-body table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Kullanıcı</th>
                            <th>IP</th>
                            <th>Ülke</th>
                            <th>Şehir</th>
                            <th>Bölge</th>
                            <th>Sayfa</th>
                            <th>Ziyaret Zamanı</th>
                        </tr>
                    </thead>
                    <tbody id="geoActivityLog">
                        <tr><td colspan="7">Yükleniyor...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card mb-3" id="usersecurity">
            <div class="card-header">🔐 Hesap Güvenliği Özeti</div>
            <div class="card-body table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Etkinlik Türü</th>
                            <th>IP Adresi</th>
                            <th>Cihaz Bilgisi</th>
                            <th>Tarih ve Saat</th>
                            <th>Başarı Durumu</th>
                        </tr>
                    </thead>
                    <tbody id="activityTableBody">
                        <tr><td colspan="5" class="text-center">Yükleniyor...</td></tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="row mb-4" id="topgraphwatch">
            <div class="col-md-6">
                <h3>En Çok Ziyaret Edilen Sayfalar</h3>
                <canvas id="topPagesChart"></canvas>
            </div>
            <div class="col-md-6">
                <h3>Tarayıcı Kullanım Oranları</h3>
                <canvas id="browserChart"></canvas>
            </div>
        </div>
    </div>

    <footer class="footer py-3 text-center">
        <div class="container">Dashboard</div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
            const connection = new signalR.HubConnectionBuilder()
            .withUrl("/statusHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function startSignalR() {
            try {
                if (connection.state !== signalR.HubConnectionState.Disconnected) {
                    console.warn("⚠ SignalR zaten bağlı veya bağlanmaya çalışıyor.");
                    return;
                }

                await connection.start();
                console.log("✅ SignalR bağlantısı başlatıldı!");
                connection.invoke("GetActiveUserCount").catch(err => console.error("GetActiveUserCount çağrısı başarısız:", err));
            } catch (err) {
                console.error("❌ SignalR bağlantısı başlatılamadı:", err);
                setTimeout(startSignalR, 5000);
            }
        }

        connection.onclose(() => {
            console.warn("⚠ SignalR bağlantısı kapandı, tekrar bağlanıyor...");
            setTimeout(() => startSignalR(), 3000);
        });

        // Güncellenmiş Performans İzleme
        connection.on("UpdatePerformanceMetrics", data => {
            const cpuUsageElement = document.getElementById("cpuUsage");
            const memoryUsageElement = document.getElementById("memoryUsage");
            const uptimeElement = document.getElementById("uptime");

            if (!cpuUsageElement || !memoryUsageElement || !uptimeElement) {
                console.warn("⚠ Güncellenmeye çalışılan DOM elemanları bulunamadı!");
                return;
            }

            cpuUsageElement.innerText = data.systemMetrics.cpuUsage;
            memoryUsageElement.innerText = data.systemMetrics.memoryUsage;
            uptimeElement.innerText = data.systemMetrics.uptime;

            const timestamp = new Date().toLocaleTimeString();

            if (cpuChart) {
                cpuChart.data.labels.push(timestamp);
                cpuChart.data.datasets[0].data.push(parseFloat(data.systemMetrics.cpuUsage));

                if (cpuChart.data.labels.length > 15) cpuChart.data.labels.shift();
                if (cpuChart.data.datasets[0].data.length > 15) cpuChart.data.datasets[0].data.shift();

                cpuChart.update();
            }

            if (memoryChart) {
                memoryChart.data.labels.push(timestamp);
                memoryChart.data.datasets[0].data.push(parseFloat(data.systemMetrics.memoryUsage));

                if (memoryChart.data.labels.length > 15) memoryChart.data.labels.shift();
                if (memoryChart.data.datasets[0].data.length > 15) memoryChart.data.datasets[0].data.shift();

                memoryChart.update();
            }
        });

        // Kullanıcı Sayısı Güncelleme
        connection.on("UpdateActiveUsers", function (activeUserCount) {
            const activeUsersElement = document.getElementById("activeUsers");
            if (activeUsersElement) {
                activeUsersElement.innerText = activeUserCount;
            } else {
                console.warn("⚠ 'activeUsers' DOM elemanı bulunamadı.");
            }
        });

        // 🟢 Chart.js Grafikleri
        const cpuCtx = document.getElementById('cpuChart')?.getContext('2d');
        const memoryCtx = document.getElementById('memoryChart')?.getContext('2d');

        let cpuChart, memoryChart;
        if (cpuCtx) {
            cpuChart = new Chart(cpuCtx, {
                type: 'line',
                data: { labels: [], datasets: [{ label: 'CPU Kullanımı (%)', data: [], borderColor: '#dc3545', borderWidth: 2 }] },
                options: { responsive: true, scales: { y: { beginAtZero: true, max: 100 } } }
            });
        }

        if (memoryCtx) {
            memoryChart = new Chart(memoryCtx, {
                type: 'line',
                data: { labels: [], datasets: [{ label: 'RAM Kullanımı (MB)', data: [], borderColor: '#007bff', borderWidth: 2 }] },
                options: { responsive: true, scales: { y: { beginAtZero: true } } }
            });
        }

        // 🟢 Kullanıcı Aktivite Loglarını Güncelle
        async function loadGeoActivityLog() {
            try {
                const res = await fetch("/api/activitylog");
                if (!res.ok) throw new Error("API hatası!");

                const logs = await res.json();
                const tbody = document.getElementById("geoActivityLog");

                if (!tbody) return;

                tbody.innerHTML = logs.length
                    ? logs.map(log => `
                        <tr>
                            <td>${log.userName}</td>
                            <td>${log.ipAddress}</td>
                            <td>${log.country}</td>
                            <td>${log.city}</td>
                            <td>${log.region}</td>
                            <td>${log.page}</td>
                            <td>${new Date(log.timestamp).toLocaleString()}</td>
                        </tr>`).join("")
                    : `<tr><td colspan="7" class="text-center">Hiçbir kayıt bulunamadı</td></tr>`;
            } catch (error) {
                console.error("❌ Kullanıcı logları alınamadı:", error);
            }
        }

        // 🟢 Hesap Güvenliği Loglarını Güncelle
        async function loadUserSecurityActivities() {
            try {
                const response = await fetch('/api/activities/activities');
                if (!response.ok) throw new Error("API hatası!");

                const activities = await response.json();
                const tableBody = document.getElementById("activityTableBody");

                if (!tableBody) return;

                tableBody.innerHTML = activities.length
                    ? activities.map(activity => `
                        <tr>
                            <td>${activity.activityType}</td>
                            <td>${activity.ipAddress}</td>
                            <td>${activity.deviceInfo}</td>
                            <td>${new Date(activity.timestamp).toLocaleString()}</td>
                            <td>${activity.isSuccess ? '<span class="badge bg-success">Başarılı</span>' : '<span class="badge bg-danger">Başarısız</span>'}</td>
                        </tr>`).join("")
                    : `<tr><td colspan="5" class="text-center">Etkinlik kaydı yok</td></tr>`;
            } catch (error) {
                console.error("❌ Güvenlik etkinlikleri alınamadı:", error);
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            startSignalR();
            loadUserSecurityActivities();
        });

        setInterval(loadGeoActivityLog, 5000);

        // 🟢 Grafikler İçin API'den Veri Çekme
        async function fetchChart(url, chartId, type, label) {
            try {
                const res = await fetch(url);
                if (!res.ok) throw new Error("API hatası!");

                const data = await res.json();
                new Chart(document.getElementById(chartId), {
                    type,
                    data: {
                        labels: data.map(d => d.page || d.browser),
                        datasets: [{ label, data: data.map(d => d.count), backgroundColor: ["#007bff", "#28a745", "#ffc107"] }]
                    }
                });
            } catch (error) {
                console.error(`❌ ${chartId} verileri alınamadı:`, error);
            }
        }

        fetchChart('/api/adminanalytics/top-pages', 'topPagesChart', 'bar', 'Ziyaret Sayısı');
        fetchChart('/api/adminanalytics/browsers', 'browserChart', 'pie', 'Tarayıcı Kullanımı');
    </script>
</body>
</html>