@using Microsoft.AspNetCore.Identity
@model IEnumerable<AppRole>

@{
    ViewData["Title"] = "Rol Yönetimi";
}


<div class="container-fluid mt-4">
    <h1 class="mb-4">Rol Yönetimi</h1>

    <div id="alert-container"></div>

    <!-- Arama Kutusu -->
    <input type="text" id="roleFilterInput" class="form-control mb-3" placeholder="ID veya Rol Adı Ara..." onkeyup="filterRoles()">

    <button class="btn btn-success mb-3" onclick="showAddRoleModal()">Yeni Rol Ekle</button>

    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Rol Adı</th>
                    <th>Açıklama</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody id="roleTableBody"></tbody>
        </table>
    </div>
</div>

<!-- Yeni Rol Ekle Modal -->
<div id="roleModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rol Ekle / Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="roleId">
                <label for="roleName">Rol Adı:</label>
                <input type="text" id="roleName" class="form-control" required />
                <label for="roleAciklama">Rol Açıklaması:</label>
                <input type="text" id="roleAciklama" class="form-control" required />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="saveRole()">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Rol Yetkilendirme Yönetimi -->
<div class="container-fluid mt-4">
    <h1 class="mb-4">Rol Yetkilendirme Yönetimi</h1>

    <!-- Arama Kutusu -->
    <input type="text" id="filterInput" class="form-control mb-3" placeholder="Rol veya Sayfa Ara..." onkeyup="filterTable()">

    <button class="btn btn-primary mb-3" onclick="showAddPermissionModal()">Yeni Yetki Ekle</button>

    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Rol</th>
                    <th>Sayfa</th>
                    <th>Erişim</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody id="rolePermissionTable"></tbody>
        </table>
    </div>
</div>

<!-- Yeni Yetki Ekle Modal -->
<div id="addPermissionModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Yeni Yetki Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <label>Rol Seç:</label>
                <select id="roleNameSelect" class="form-control"></select>

                <label>Sayfa Seç:</label>
                <select id="pagePathSelect" class="form-control"></select>

                <label>Erişim:</label>
                <select id="canAccessSelect" class="form-control">
                    <option value="true">Evet</option>
                    <option value="false">Hayır</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="addPermission()">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<script>
    // API'den rolleri çek ve tabloya yerleştir
    async function loadRoles() {
        try {
            let res = await fetch("/api/roleapi");
            let roles = await res.json();
            let tbody = document.getElementById("roleTableBody");
            tbody.innerHTML = roles.map(role => `
                <tr>
                    <td>${role.id}</td>
                    <td>${role.name}</td>
                    <td>${role.aciklama}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editRole('${role.id}', '${role.name}', '${role.aciklama}')">Düzenle</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteRole('${role.id}')">Sil</button>
                    </td>
                </tr>
            `).join("");
        } catch (error) {
            console.error("Roller yüklenirken hata oluştu:", error);
        }
    }

    // API'den yetkilendirmeleri çek ve tabloya yerleştir
    async function loadPermissions() {
        try {
            let res = await fetch("/api/rolepermission");
            let permissions = await res.json();
            let tbody = document.getElementById("rolePermissionTable");

            tbody.innerHTML = permissions.map(p => `
                <tr data-id="${p.id}">
                    <td class="role-name">${p.roleName}</td>
                    <td class="page-path">${p.pagePath}</td>
                    <td>
                        <input type="checkbox" ${p.canAccess ? "checked" : ""}
                               onchange="togglePermission('${p.id}', this.checked)">
                    </td>
                    <td>
                        <button class="btn btn-danger btn-sm" onclick="deletePermission('${p.id}')">Sil</button>
                    </td>
                </tr>
            `).join("");
        } catch (error) {
            console.error("Yetkilendirme yüklenirken hata oluştu:", error);
        }
    }

    // Filtreleme fonksiyonları
    function filterTable() {
        let input = document.getElementById("filterInput").value.toLowerCase();
        let rows = document.querySelectorAll("#rolePermissionTable tr");

        rows.forEach(row => {
            let cells = row.querySelectorAll("td");
            let role = cells[0]?.innerText.toLowerCase();
            let page = cells[1]?.innerText.toLowerCase();
            row.style.display = (role.includes(input) || page.includes(input)) ? "" : "none";
        });
    }

    function filterRoles() {
        let input = document.getElementById("roleFilterInput").value.toLowerCase();
        let rows = document.querySelectorAll("#roleTableBody tr");

        rows.forEach(row => {
            let cells = row.querySelectorAll("td");
            let roleId = cells[0]?.innerText.toLowerCase();
            let roleName = cells[1]?.innerText.toLowerCase();
            row.style.display = (roleId.includes(input) || roleName.includes(input)) ? "" : "none";
        });
    }

    // Modal işlemleri
    function showAddRoleModal() {
        document.getElementById("roleId").value = "";
        document.getElementById("roleName").value = "";
        document.getElementById("roleAciklama").value = "";
        new bootstrap.Modal(document.getElementById("roleModal")).show();
    }

    function editRole(id, name, Aciklama) {
        document.getElementById("roleId").value = id;
        document.getElementById("roleName").value = name;
        document.getElementById("roleAciklama").value = Aciklama;
        new bootstrap.Modal(document.getElementById("roleModal")).show();
    }

    async function saveRole() {
        let id = document.getElementById("roleId").value;
        let name = document.getElementById("roleName").value;
        let Aciklama = document.getElementById("roleAciklama").value;

        let payload = { name: name, Aciklama: Aciklama };
        let method = id ? "PUT" : "POST";
        let url = id ? `/api/roleapi/${id}` : "/api/roleapi";

        try {
            let response = await fetch(url, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                loadRoles();
                bootstrap.Modal.getInstance(document.getElementById("roleModal")).hide();
            } else {
                alert("Rol kaydedilirken hata oluştu.");
            }
        } catch (error) {
            console.error("Rol kaydetme hatası:", error);
        }
    }

    async function deleteRole(id) {
        if (!confirm("Bu rolü silmek istediğinize emin misiniz?")) return;
        try {
            let response = await fetch(`/api/roleapi/${id}`, { method: "DELETE" });
            if (response.ok) {
                loadRoles();
            }
        } catch (error) {
            console.error("Silme hatası:", error);
        }
    }

    // Yetkilendirme işlemleri
    async function togglePermission(id, canAccess) {
        let row = document.querySelector(`#rolePermissionTable tr[data-id='${id}']`);
        let roleName = row.querySelector(".role-name").innerText;
        let pagePath = row.querySelector(".page-path").innerText;

        if (!pagePath) {
            alert("Sayfa yolu boş bırakılamaz!");
            loadPermissions();
            return;
        }

        let bodyData = JSON.stringify({
            roleName: roleName,
            pagePath: pagePath,
            canAccess: canAccess
        });

        try {
            let response = await fetch(`/api/rolepermission/${id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: bodyData
            });
            if (response.ok) {
                loadPermissions();
            } else {
                alert("Yetkilendirme güncellenirken hata oluştu.");
            }
        } catch (error) {
            console.error("Yetkilendirme güncelleme hatası:", error);
        }
    }

    async function deletePermission(id) {
        if (!confirm("Bu yetkiyi silmek istediğinize emin misiniz?")) return;
        try {
            let response = await fetch(`/api/rolepermission/${id}`, { method: "DELETE" });
            if (response.ok) {
                alert("Yetki başarıyla silindi.");
                loadPermissions();
            } else {
                let errorText = await response.text();
                throw new Error(`Silme başarısız: ${errorText}`);
            }
        } catch (error) {
            console.error("Yetki silme hatası:", error);
            alert("Yetki silinirken bir hata oluştu.");
        }
    }
        function showAddPermissionModal() {
        // Rol listesini doldur
        fetch("/api/roleapi")
            .then(response => response.json())
            .then(roles => {
                const roleSelect = document.getElementById("roleNameSelect");
                roleSelect.innerHTML = roles.map(role => `<option value="${role.name}">${role.name}</option>`).join("");
            })
            .catch(error => console.error("Roller yüklenirken hata oluştu:", error));

        // Sayfa listesini doldur (eğer varsa, API endpoint'in varsa)
       fetch("/api/pageapi")
    .then(response => response.json())
    .then(pages => {
        console.log("Received pages:", pages);
        const pageSelect = document.getElementById("pagePathSelect");
        // Eğer pages dizisi sadece stringlerden oluşuyorsa:
        pageSelect.innerHTML = pages.map(page => `<option value="${page}">${page}</option>`).join("");
    })
    .catch(error => {
        console.warn("Sayfa bilgisi gelmiyor, sabit değerlerle devam edilebilir.", error);
        // Eğer API'den veri gelmezse, sabit değerlerle devam edebilirsin:
        document.getElementById("pagePathSelect").innerHTML = `
            <option value="/home/index">/home/index</option>
            <option value="/admin/dashboard">/admin/dashboard</option>
        `;
    });


        // Modalı aç
        new bootstrap.Modal(document.getElementById("addPermissionModal")).show();
    }

        async function addPermission() {
        // Modal içerisindeki select elemanlarından verileri çek
        const roleSelect = document.getElementById("roleNameSelect");
        const pageSelect = document.getElementById("pagePathSelect");
        const canAccessSelect = document.getElementById("canAccessSelect");
        const roleName = roleSelect.value;
        const pagePath = pageSelect.value;
        const canAccess = canAccessSelect.value === "true";

        // Payload hazırla
        const payload = { roleName, pagePath, canAccess };

        try {
            // API'ye POST isteği gönder
            const response = await fetch("/api/rolepermission", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                // Başarılı ise modalı kapat ve listeyi yeniden yükle
                bootstrap.Modal.getInstance(document.getElementById("addPermissionModal")).hide();
                loadPermissions();
            } else {
                alert("Yetki eklenirken hata oluştu.");
            }
        } catch (error) {
            console.error("addPermission hatası:", error);
            alert("Yetki eklenirken bir hata oluştu.");
        }
    }


    // Sayfa yüklendiğinde rolleri ve yetkilendirmeleri yükle
    document.addEventListener("DOMContentLoaded", () => {
        loadRoles();
        loadPermissions();
    });
</script>
