@using Microsoft.AspNetCore.Identity
@model IEnumerable<IdentityRole>

@{
    ViewData["Title"] = "Rol Yönetimi";
}

<div class="container-fluid mt-4">
    <h1 class="mb-4">Rol Yönetimi</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    <a href="@Url.Action("Create", "Role", new { area = "Admin" })" class="btn btn-success mb-3">Yeni Rol Ekle</a>

    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Rol Adı</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var role in Model)
                {
                    <tr>
                        <td>@role.Id</td>
                        <td>@role.Name</td>
                        <td>
                            <a href="@Url.Action("Edit", "Role", new { area = "Admin", id = role.Id })" class="btn btn-warning btn-sm">Düzenle</a>
                            <form asp-action="Delete" asp-controller="Role" asp-area="Admin" method="post" onsubmit="return confirm('Silmek istediğinize emin misiniz?');" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@role.Id" />
                                <button type="submit" class="btn btn-danger btn-sm">Sil</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



<div class="container-fluid mt-4">
    <h1 class="mb-4">Rol Yetkilendirme Yönetimi</h1>

    <!-- Yetki Ekleme Butonu -->
    <button class="btn btn-primary mb-3" onclick="showAddModal()">Yeni Yetki Ekle</button>

    <!-- Yetki Yönetimi Tablosu -->
    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Rol</th>
                    <th>Sayfa</th>
                    <th>Erişim</th>
                    <th>İşlemler</th>
                </tr>
            </thead>
            <tbody id="rolePermissionTable">
                <tr><td colspan="4" class="text-center">Yükleniyor...</td></tr>
            </tbody>
        </table>
    </div>

    <!-- Yetki Ekleme Modalı -->
    <div id="addPermissionModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Yeni Yetki Ekle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <label>Rol Seç:</label>
                    <select id="roleName" class="form-control">
                        <option value="">Yükleniyor...</option>
                    </select>

                    <label>Sayfa Seç:</label>
                    <select id="pagePath" class="form-control">
                        <option value="">Yükleniyor...</option>
                    </select>

                    <label>Erişim:</label>
                    <select id="canAccess" class="form-control">
                        <option value="true">Evet</option>
                        <option value="false">Hayır</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="button" class="btn btn-primary" onclick="addPermission()">Kaydet</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    async function fetchRolesAndPages() {
        let roleSelect = document.getElementById("roleName");
        let pageSelect = document.getElementById("pagePath");

        // Rolleri getir
        let roleRes = await fetch("/api/roles");
        let roles = await roleRes.json();
        roleSelect.innerHTML = roles.map(role => `<option value="${role.name}">${role.name}</option>`).join("");

        // Sayfaları getir
        let pageRes = await fetch("/api/pages");
        let pages = await pageRes.json();
        pageSelect.innerHTML = pages.map(page => `<option value="${page}">${page}</option>`).join("");
    }

    async function fetchPermissions() {
        let response = await fetch("/api/role-permissions");
        let data = await response.json();
        let tableBody = document.getElementById("rolePermissionTable");
        tableBody.innerHTML = "";

        data.forEach(permission => {
            let row = `<tr>
                <td>${permission.roleName}</td>
                <td>${permission.pagePath}</td>
                <td>
                    <input type="checkbox" class="toggle-permission" data-id="${permission.id}" ${permission.canAccess ? "checked" : ""} />
                </td>
                <td>
                    <button class="btn btn-danger btn-sm delete-permission" data-id="${permission.id}">Sil</button>
                </td>
            </tr>`;
            tableBody.innerHTML += row;
        });

        document.querySelectorAll('.toggle-permission').forEach(el => {
            el.addEventListener('change', async function() {
                let id = this.getAttribute("data-id");
                let canAccess = this.checked;

                await fetch(`/api/role-permissions/${id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ canAccess })
                });
            });
        });

        document.querySelectorAll('.delete-permission').forEach(el => {
            el.addEventListener('click', async function() {
                let id = this.getAttribute("data-id");

                if (confirm("Bu yetkiyi silmek istediğinize emin misiniz?")) {
                    await fetch(`/api/role-permissions/${id}`, { method: "DELETE" });
                    fetchPermissions();
                }
            });
        });
    }

    async function addPermission() {
        let roleName = document.getElementById("roleName").value;
        let pagePath = document.getElementById("pagePath").value;
        let canAccess = document.getElementById("canAccess").value === "true";

        let response = await fetch("/api/role-permissions", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ roleName, pagePath, canAccess })
        });

        if (response.ok) {
            alert("Yetki eklendi!");
            fetchPermissions();
            bootstrap.Modal.getInstance(document.getElementById('addPermissionModal')).hide();
        }
    }

    function showAddModal() {
        let modal = new bootstrap.Modal(document.getElementById('addPermissionModal'));
        modal.show();
        fetchRolesAndPages();
    }

    fetchPermissions();
</script>
